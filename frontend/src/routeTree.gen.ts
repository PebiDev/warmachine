/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const LeadersLazyImport = createFileRoute('/leaders')()
const ArmiesLazyImport = createFileRoute('/armies')()
const AboutLazyImport = createFileRoute('/about')()
const LeadersCreateLazyImport = createFileRoute('/leaders/create')()
const ArmiesCreateLazyImport = createFileRoute('/armies/create')()
const LeadersUpdateIdLazyImport = createFileRoute('/leaders/update/$id')()
const LeadersDeleteIdLazyImport = createFileRoute('/leaders/delete/$id')()
const ArmiesUpdateIdLazyImport = createFileRoute('/armies/update/$id')()
const ArmiesDeleteIdLazyImport = createFileRoute('/armies/delete/$id')()

// Create/Update Routes

const LeadersLazyRoute = LeadersLazyImport.update({
  id: '/leaders',
  path: '/leaders',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/leaders.lazy').then((d) => d.Route))

const ArmiesLazyRoute = ArmiesLazyImport.update({
  id: '/armies',
  path: '/armies',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/armies.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LeadersCreateLazyRoute = LeadersCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => LeadersLazyRoute,
} as any).lazy(() =>
  import('./routes/leaders.create.lazy').then((d) => d.Route),
)

const ArmiesCreateLazyRoute = ArmiesCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ArmiesLazyRoute,
} as any).lazy(() => import('./routes/armies.create.lazy').then((d) => d.Route))

const LeadersUpdateIdLazyRoute = LeadersUpdateIdLazyImport.update({
  id: '/update/$id',
  path: '/update/$id',
  getParentRoute: () => LeadersLazyRoute,
} as any).lazy(() =>
  import('./routes/leaders.update.$id.lazy').then((d) => d.Route),
)

const LeadersDeleteIdLazyRoute = LeadersDeleteIdLazyImport.update({
  id: '/delete/$id',
  path: '/delete/$id',
  getParentRoute: () => LeadersLazyRoute,
} as any).lazy(() =>
  import('./routes/leaders.delete.$id.lazy').then((d) => d.Route),
)

const ArmiesUpdateIdLazyRoute = ArmiesUpdateIdLazyImport.update({
  id: '/update/$id',
  path: '/update/$id',
  getParentRoute: () => ArmiesLazyRoute,
} as any).lazy(() =>
  import('./routes/armies.update.$id.lazy').then((d) => d.Route),
)

const ArmiesDeleteIdLazyRoute = ArmiesDeleteIdLazyImport.update({
  id: '/delete/$id',
  path: '/delete/$id',
  getParentRoute: () => ArmiesLazyRoute,
} as any).lazy(() =>
  import('./routes/armies.delete.$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/armies': {
      id: '/armies'
      path: '/armies'
      fullPath: '/armies'
      preLoaderRoute: typeof ArmiesLazyImport
      parentRoute: typeof rootRoute
    }
    '/leaders': {
      id: '/leaders'
      path: '/leaders'
      fullPath: '/leaders'
      preLoaderRoute: typeof LeadersLazyImport
      parentRoute: typeof rootRoute
    }
    '/armies/create': {
      id: '/armies/create'
      path: '/create'
      fullPath: '/armies/create'
      preLoaderRoute: typeof ArmiesCreateLazyImport
      parentRoute: typeof ArmiesLazyImport
    }
    '/leaders/create': {
      id: '/leaders/create'
      path: '/create'
      fullPath: '/leaders/create'
      preLoaderRoute: typeof LeadersCreateLazyImport
      parentRoute: typeof LeadersLazyImport
    }
    '/armies/delete/$id': {
      id: '/armies/delete/$id'
      path: '/delete/$id'
      fullPath: '/armies/delete/$id'
      preLoaderRoute: typeof ArmiesDeleteIdLazyImport
      parentRoute: typeof ArmiesLazyImport
    }
    '/armies/update/$id': {
      id: '/armies/update/$id'
      path: '/update/$id'
      fullPath: '/armies/update/$id'
      preLoaderRoute: typeof ArmiesUpdateIdLazyImport
      parentRoute: typeof ArmiesLazyImport
    }
    '/leaders/delete/$id': {
      id: '/leaders/delete/$id'
      path: '/delete/$id'
      fullPath: '/leaders/delete/$id'
      preLoaderRoute: typeof LeadersDeleteIdLazyImport
      parentRoute: typeof LeadersLazyImport
    }
    '/leaders/update/$id': {
      id: '/leaders/update/$id'
      path: '/update/$id'
      fullPath: '/leaders/update/$id'
      preLoaderRoute: typeof LeadersUpdateIdLazyImport
      parentRoute: typeof LeadersLazyImport
    }
  }
}

// Create and export the route tree

interface ArmiesLazyRouteChildren {
  ArmiesCreateLazyRoute: typeof ArmiesCreateLazyRoute
  ArmiesDeleteIdLazyRoute: typeof ArmiesDeleteIdLazyRoute
  ArmiesUpdateIdLazyRoute: typeof ArmiesUpdateIdLazyRoute
}

const ArmiesLazyRouteChildren: ArmiesLazyRouteChildren = {
  ArmiesCreateLazyRoute: ArmiesCreateLazyRoute,
  ArmiesDeleteIdLazyRoute: ArmiesDeleteIdLazyRoute,
  ArmiesUpdateIdLazyRoute: ArmiesUpdateIdLazyRoute,
}

const ArmiesLazyRouteWithChildren = ArmiesLazyRoute._addFileChildren(
  ArmiesLazyRouteChildren,
)

interface LeadersLazyRouteChildren {
  LeadersCreateLazyRoute: typeof LeadersCreateLazyRoute
  LeadersDeleteIdLazyRoute: typeof LeadersDeleteIdLazyRoute
  LeadersUpdateIdLazyRoute: typeof LeadersUpdateIdLazyRoute
}

const LeadersLazyRouteChildren: LeadersLazyRouteChildren = {
  LeadersCreateLazyRoute: LeadersCreateLazyRoute,
  LeadersDeleteIdLazyRoute: LeadersDeleteIdLazyRoute,
  LeadersUpdateIdLazyRoute: LeadersUpdateIdLazyRoute,
}

const LeadersLazyRouteWithChildren = LeadersLazyRoute._addFileChildren(
  LeadersLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/armies': typeof ArmiesLazyRouteWithChildren
  '/leaders': typeof LeadersLazyRouteWithChildren
  '/armies/create': typeof ArmiesCreateLazyRoute
  '/leaders/create': typeof LeadersCreateLazyRoute
  '/armies/delete/$id': typeof ArmiesDeleteIdLazyRoute
  '/armies/update/$id': typeof ArmiesUpdateIdLazyRoute
  '/leaders/delete/$id': typeof LeadersDeleteIdLazyRoute
  '/leaders/update/$id': typeof LeadersUpdateIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/armies': typeof ArmiesLazyRouteWithChildren
  '/leaders': typeof LeadersLazyRouteWithChildren
  '/armies/create': typeof ArmiesCreateLazyRoute
  '/leaders/create': typeof LeadersCreateLazyRoute
  '/armies/delete/$id': typeof ArmiesDeleteIdLazyRoute
  '/armies/update/$id': typeof ArmiesUpdateIdLazyRoute
  '/leaders/delete/$id': typeof LeadersDeleteIdLazyRoute
  '/leaders/update/$id': typeof LeadersUpdateIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/armies': typeof ArmiesLazyRouteWithChildren
  '/leaders': typeof LeadersLazyRouteWithChildren
  '/armies/create': typeof ArmiesCreateLazyRoute
  '/leaders/create': typeof LeadersCreateLazyRoute
  '/armies/delete/$id': typeof ArmiesDeleteIdLazyRoute
  '/armies/update/$id': typeof ArmiesUpdateIdLazyRoute
  '/leaders/delete/$id': typeof LeadersDeleteIdLazyRoute
  '/leaders/update/$id': typeof LeadersUpdateIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/armies'
    | '/leaders'
    | '/armies/create'
    | '/leaders/create'
    | '/armies/delete/$id'
    | '/armies/update/$id'
    | '/leaders/delete/$id'
    | '/leaders/update/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/armies'
    | '/leaders'
    | '/armies/create'
    | '/leaders/create'
    | '/armies/delete/$id'
    | '/armies/update/$id'
    | '/leaders/delete/$id'
    | '/leaders/update/$id'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/armies'
    | '/leaders'
    | '/armies/create'
    | '/leaders/create'
    | '/armies/delete/$id'
    | '/armies/update/$id'
    | '/leaders/delete/$id'
    | '/leaders/update/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ArmiesLazyRoute: typeof ArmiesLazyRouteWithChildren
  LeadersLazyRoute: typeof LeadersLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  ArmiesLazyRoute: ArmiesLazyRouteWithChildren,
  LeadersLazyRoute: LeadersLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/armies",
        "/leaders"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/armies": {
      "filePath": "armies.lazy.tsx",
      "children": [
        "/armies/create",
        "/armies/delete/$id",
        "/armies/update/$id"
      ]
    },
    "/leaders": {
      "filePath": "leaders.lazy.tsx",
      "children": [
        "/leaders/create",
        "/leaders/delete/$id",
        "/leaders/update/$id"
      ]
    },
    "/armies/create": {
      "filePath": "armies.create.lazy.tsx",
      "parent": "/armies"
    },
    "/leaders/create": {
      "filePath": "leaders.create.lazy.tsx",
      "parent": "/leaders"
    },
    "/armies/delete/$id": {
      "filePath": "armies.delete.$id.lazy.tsx",
      "parent": "/armies"
    },
    "/armies/update/$id": {
      "filePath": "armies.update.$id.lazy.tsx",
      "parent": "/armies"
    },
    "/leaders/delete/$id": {
      "filePath": "leaders.delete.$id.lazy.tsx",
      "parent": "/leaders"
    },
    "/leaders/update/$id": {
      "filePath": "leaders.update.$id.lazy.tsx",
      "parent": "/leaders"
    }
  }
}
ROUTE_MANIFEST_END */
